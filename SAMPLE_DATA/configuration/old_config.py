#!/usr/bin/python3
# coding: utf-8
# config.py

import os



user_folder = r'\\FANGORN\user\duncan\LifePIM_Data'       # use this for live data on local PC during dev (Duncan)
user_folder = r'N:\duncan\LifePIM_Data'       # use this for live data on local PC during dev (Duncan)
#user_folder = r'D:\docs\LIFEPIM_DATA_CACHE'          
#user_folder = r'D:\dev\src\lifepim\lifepim\SAMPLE_DATA'  # use this when releasing public version

display_name = 'Duncan'  # single user server runs on users local file system


port_num=9741           # port to browse to, eg. http://127.0.0.1:9741/
WEB_VERSION = "DEV"     # to show debug lines in web server

logon_file = os.path.join(user_folder, 'configuration', 'lifepim.par')
data_folder = os.path.join(user_folder, 'DATA')
index_folder = os.path.join(user_folder, 'index')
ontology_file = os.path.join(user_folder, 'configuration', 'exported_ontology.csv')
ontology_folder = os.path.join(user_folder, 'configuration', 'ontology')

log_file = os.path.join(user_folder, 'lifepim_desktop.log')

# diary and infolink
diary_pcusage_base_fname = os.path.join(data_folder, 'diary','pc_usage_')
diary_base_fname =  os.path.join(data_folder, 'diary', 'diary_' )
diary_base_error_fname =  os.path.join(data_folder, 'diary', 'error_' )
icon_file = os.path.join(os.getcwd(), 'assets','icons','PNG',  'Stopwatch_On.ico')


filelist_op_fldr = r'N:\duncan\LifePIM_Data\DATA\notes\00-META\03-Calendar\03-1-Journal'
filelist_merged_files = r'D:\docs\_PROD_PERS\LifePIM_Data'  # for testing

filelist_op_fldr = r'D:\docs\_PROD_PERS\LifePIM_Data\journals'  # for testing

filelist_merged_files = r'D:\docs\_PROD_PERS\LifePIM_Data'  # for testing

# exclude installed apps with large libraries (1000s of files not generated by user)
filelist_excluded_folders = [
    r'D:\docs\Arduino\libraries',
    r'D:\docs\DAZ 3D',
    r'D:\dev\src\z_backup',
    r'D:\dev\java_inst',
]


# data folder for individual exports
export_data_folder_base =  os.path.join(data_folder, 'notes','_data')


#index_folder = os.path.join(r'D:\lifepim_cache', 'index')
#print('WARNING - cache folder used - updates not copied')


calendar_folder = os.path.join(user_folder, 'calendar')
folder_list_file =  os.path.join(user_folder, 'configuration', 'folders.lis')

folder_list_file_EXT_HD =  os.path.join(user_folder, 'configuration', 'folders_EXT_HD.lis')

db_name = os.path.join(user_folder, 'DATA', 'lifepim.db')


local_folder_theme = os.path.join(os.getcwd(), 'interfaces')

base_url = 'https://www.lifepim.com'    # testing, point to live site for API
base_url = '127.0.0.1:5000'             # running local (default)

image_xtn_list = ['*.jpg', '*.JPG', '*.PNG', '*.png']

toolbar_definition =  [  # [icon, name, function, comments]
    ['🏠', 'home',     'tb_home',         '🏠📰 This is the overview page'],
    ['🕐', 'calendar', 'tb_calendar', '⌚📅 🕐 Project overview showing current list of tasks being worked on'],
    ['☑',  'tasks',    'tb_tasks',    '☑✔📎🔨✘☑ ⛏ ☹     💻 💹 Tasks'],
    ['📝', 'notes',    'tb_notes',    '🗒✎📝 ✏ 🗊Team wiki page - ultra simple'], #
    ['👤', 'contacts', 'tb_contacts',     '☎👱  👤  Contacts view'],
    ['🌏️', 'places',   'tb_places',    '🌏🛰️⛟ ⌖ ⛰    💻 💹Locations - maps, people finder'],
    ['▦',  'data',     'tb_data',    '▧🗒 🗊data tables'],
    ['🏆', 'badges',   'tb_badges',     '★ ⛤ ✵ ✭ ⚜'],
    ['💲', 'money',    'tb_money',      ''],
    ['♬',  'music',    'tb_music',     '🗒 🗊music'],
    ['🖼',  'images',  'tb_images',      '🗒 🗊images'],
    ['🎮', 'apps',     'tb_apps',     '👍 👎 '],
    ['📂',  'files',   'tb_files',     '🗒 🗊images and files'],
    ['⚿',  'admin',   'tb_admin',      'passwords'],
    ['⚙',  'options', 'tb_options',     'Options for LifePIM'],
    ['⚙',  'about',   'tb_about',    'About LifePIM']
    ]

api_routes = [
    '/',
    '/notes',
    '/notes/<id>',
    '/tasks',
    '/tasks/<id>',
    '/calendar',
    '/calendar/<id>',
    '/files',
    '/files/<filename>',
    '/options',
]



current_index_list = [
    r'\\FANGORN\user\duncan',
    r'\\FANGORN\user\DATA',
    r'\\FANGORN\user\lnz',
    r'\\FANGORN\photo',
    r'\\FANGORN\music',
    r'D:\docs',
    r'E:\UE4_proj',
    r'D:\dev',
]


file_startup_path = r"D:\dev\src\worldbuild"
file_startup_path = r"D:\dev\src\lifepim\lifepim\SAMPLE_DATA"
file_startup_path = r"D:\dev\src\LIFEPIM_WEB\USER_DATA\duncan\notes"
file_startup_path = r"N:\duncan\LifePIM_Data"

proj_list = [
'Dev',
'Design',
'Fun',
'Games',
'Family',
'Car',
'Business',
'Web',
'Home',
'Study',
'Health',
'Work',
'RasbPI',
'AI',
'Support',
'Pers'
]

def get_conn_str():
	conn_str = {}
	with open(logon_file, 'r') as f:
		conn_str['host'] = f.readline().strip(' ').strip('\n')
		conn_str['user'] = f.readline().strip(' ').strip('\n')
		conn_str['pass'] = f.readline().strip(' ').strip('\n')
		conn_str['db'] = f.readline().strip(' ').strip('\n')

	return conn_str

def get_index_filename_from_path(fldr):

    clean_name =  fldr.replace('\\', '_').replace(':',';')
    return os.path.join(user_folder, 'index', 'raw_filelist_' + clean_name + '.csv')

def get_path_from_index_filename(fname):

    clean_name =  fname.replace('_', '\\').replace(';', ':',)
    display_name = clean_name[len(index_folder)+14:][:-4]
    return display_name

def build_toolbar_file(fname):
    df = '# LifePIM Toolbar definitions for Tkinter\n'
    df += "tb_font = tkFont.Font(family='Helvetica', size=36, weight='bold')\n\n"

    fn = '# Function handling for LifePIM Toolbar clicks\n'
    fn += ''
    for ndx, tb in enumerate(toolbar_definition):
        print(tb)
        cmd = 'button_click_' + tb[2]
        df += 'btn' + str(ndx+1) + " = Button(window, text='" + tb[0] + "', "
        df += 'command=' + cmd + ')\n'
        df += 'btn' + str(ndx+1) + '.font = tb_font\n'  
        df += 'btn' + str(ndx+1) + '.grid(column=' + str(ndx) + ', row=0)\n\n'

        fn += 'def ' + cmd + '():\n'
        fn += '     user clicked toolbar ' + tb[1] + "\n'
        fn += "    print('user clicked toolbar " + tb[1] + "')\n\n"

    print(df)

    with open(fname + 'tb_def.txt', 'w') as f:
        f.write(df)
    
    with open(fname + 'tb_events.txt', 'w') as f:
        f.write(fn)
    
